(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{435:function(s,t,a){"use strict";a.r(t);var n=a(42),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"xargs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xargs"}},[s._v("#")]),s._v(" xargs")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("xargs 命令教程"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("将管道传来的标准输入转换为命令行参数")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\nhello world\n")])])]),a("p",[s._v("默认情况下，"),a("code",[s._v("xargs")]),s._v(" 将换行符和空格作为分隔符，把标准输入分解成一个个命令行参数。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one two three"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v("\n")])])]),a("p",[a("strong",[a("code",[s._v("-d")]),s._v(" 参数可以更改分隔符。")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[s._v("\\t")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[s._v("\\t")]),s._v('c"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[s._v("\\t")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n")])])]),a("p",[a("strong",[a("code",[s._v("-p")]),s._v(" 参数，"),a("code",[s._v("-t")]),s._v(" 参数")])]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("xargs")]),s._v(" 命令以后，由于存在转换参数过程，有时需要确认一下到底执行的是什么命令。")]),s._v(" "),a("p",[a("code",[s._v("-p")]),s._v(" 参数打印出要执行的命令，询问用户是否要执行。")]),s._v(" "),a("p",[a("code",[s._v("-t")]),s._v(" 参数则是打印出最终要执行的命令，然后直接执行，不需要用户确认。")]),s._v(" "),a("p",[a("strong",[a("code",[s._v("-0")]),s._v(" 参数与 "),a("code",[s._v("find")]),s._v(" 命令")])]),s._v(" "),a("p",[s._v("由于 "),a("code",[s._v("xargs")]),s._v(" 默认将空格作为分隔符，所以不太适合处理文件名，因为文件名可能包含空格。")]),s._v(" "),a("p",[a("code",[s._v("find")]),s._v(" 命令有一个特别的参数 "),a("code",[s._v("-print0")]),s._v(" ，指定输出的文件列表以 "),a("code",[s._v("null")]),s._v(" 分隔。然后，"),a("code",[s._v("xargs")]),s._v(" 命令的 "),a("code",[s._v("-0")]),s._v(" 参数表示用null当作分隔符。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" /path -type f -print0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" -0 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("\n")])])]),a("p",[a("strong",[a("code",[s._v("-L")]),s._v(" 参数")])]),s._v(" "),a("p",[s._v("如果标准输入包含多行，"),a("code",[s._v("-L")]),s._v(" 参数指定多少行作为一个命令行参数。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" -L "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" -name\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*.txt"')]),s._v("\n./foo.txt\n./hello.txt\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*.md"')]),s._v("\n./README.md\n\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('c"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" -L "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\na\nb\nc\n")])])]),a("p",[a("strong",[a("code",[s._v("-n")]),s._v(" 参数")])]),s._v(" "),a("p",[a("code",[s._v("-L")]),s._v(" 参数虽然解决了多行的问题，但是有时用户会在同一行输入多项。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" -name\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*.txt"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*.md"')]),s._v("\nfind: paths must precede expression: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.md'")]),s._v("\n")])])]),a("p",[s._v("上面的命令将同一行的两项作为命令行参数，导致报错。")]),s._v(" "),a("p",[a("code",[s._v("-n")]),s._v(" 参数指定每次将多少项，作为命令行参数。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" -n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\n")])])]),a("p",[a("strong",[a("code",[s._v("-I")]),s._v(" 参数")])]),s._v(" "),a("p",[s._v("如果 "),a("code",[s._v("xargs")]),s._v(" 要将命令行参数传给多个命令，可以使用 "),a("code",[s._v("-I")]),s._v(" 参数。")]),s._v(" "),a("p",[a("code",[s._v("-I")]),s._v(" 指定每一项命令行参数的替代字符串。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" foo.txt\none\ntwo\nthree\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" foo.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" -I "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" -c "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'echo file; mkdir file'")]),s._v("\none \ntwo\nthree\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" \none two three\n")])])]),a("p",[a("strong",[a("code",[s._v("--max-procs")]),s._v(" 参数")])]),s._v(" "),a("p",[a("code",[s._v("xargs")]),s._v(" 默认只用一个进程执行命令。如果命令要执行多次，必须等上一次执行完，才能执行下一次。")]),s._v(" "),a("p",[a("code",[s._v("--max-procs")]),s._v(" 参数指定同时用多少个进程并行执行命令。"),a("code",[s._v("--max-procs 2")]),s._v(" 表示同时最多使用两个进程，"),a("code",[s._v("--max-procs 0")]),s._v(" 表示不限制进程数。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -q "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" -n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" --max-procs "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" docker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v("\n")])])]),a("p",[s._v("上面命令表示，同时关闭尽可能多的 Docker 容器，这样运行速度会快很多。")])])}),[],!1,null,null,null);t.default=e.exports}}]);